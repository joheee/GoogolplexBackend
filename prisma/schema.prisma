// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String?
  name       String
  picture    String   @default("https://static-00.iconduck.com/assets.00/avatar-default-symbolic-icon-256x256-q0fen40c.png")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_post_comment    UserPostComment[]
  notifications        Notification[]
  user_class_member    UserClassMember[]
  user_assignment_todo UserAssignmentTodo[]
}

model Notification {
  id          String   @id @default(uuid())
  title       String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  is_read     Boolean  @default(false)
  user_id     String

  user User @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Class {
  id                String            @id @default(uuid())
  class_code        String            @unique
  subject           String
  description       String
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  user_class_member UserClassMember[]
  post              Post[]
}

model UserClassMember {
  id         String   @id @default(uuid())
  is_teacher Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  class_id   String
  user_id    String

  class Class @relation(fields: [class_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Article {
  id      String @id @default(uuid())
  title   String
  content String
  post    Post?
}

model Assignment {
  id                   String               @id @default(uuid())
  title                String
  content              String
  due_date             DateTime
  post                 Post?
  user_assignment_todo UserAssignmentTodo[]
  AssignmentFile       AssignmentFile?
}

model Post {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_post_comment UserPostComment[]
  article           Article           @relation(fields: [article_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  assignment        Assignment?       @relation(fields: [assignment_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  class             Class             @relation(fields: [class_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  article_id        String            @unique
  assignment_id     String?           @unique
  class_id          String
}

model UserPostComment {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  comment    String
  user       User     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_id    String
  post       Post     @relation(fields: [post_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  post_id    String
}

model UserAssignmentTodo {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  score      Int      @default(0)
  is_finish  Boolean  @default(false)

  user           User            @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_id        String
  assignment     Assignment      @relation(fields: [assignment_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  assignment_id  String
  UserTodoAnswer UserTodoAnswer?
}

model UserTodoAnswer {
  id                      String             @id @default(uuid())
  answer                  String
  created_at              DateTime           @default(now())
  updated_at              DateTime           @updatedAt
  user_assignment_todo    UserAssignmentTodo @relation(fields: [user_assignment_todo_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_assignment_todo_id String             @unique
  AnswerFile              AnswerFile?
}

model AssignmentFile {
  id             String     @id @default(uuid())
  file_name      String
  file_extension String
  url            String
  assignment     Assignment @relation(fields: [assignment_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  assignment_id  String     @unique
}

model AnswerFile {
  id                  String         @id @default(uuid())
  file_name           String
  file_extension      String
  url                 String
  user_todo_answer    UserTodoAnswer @relation(fields: [user_todo_answer_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user_todo_answer_id String         @unique
}
